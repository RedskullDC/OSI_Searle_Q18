-- This file is copyright by Grant Searle 2014
-- You are free to use this file in your own projects but must never charge for it nor use it without
-- acknowledgement.
-- Please ask permission from Grant Searle before republishing elsewhere.
-- If you use this file or any part of it, please add an acknowledgement to myself and
-- a link back to my main web site http://searle.hostei.com/grant/    
-- and to the UK101 page at http://searle.hostei.com/grant/uk101FPGA/index.html
--
-- Please check on the above web pages to see if there are any updates before using this file.
-- If for some reason the page is no longer available, please search for "Grant Searle"
-- on the internet to see if I have moved to another web hosting service.
--
-- Grant Searle
-- eMail address available on my main web page link above.

-- Initial port to Altera DE0_CV by Leslie Ayling - 8th April 2015

library ieee;
use ieee.std_logic_1164.all;
use  IEEE.STD_LOGIC_ARITH.all;
use  IEEE.STD_LOGIC_UNSIGNED.all;

entity uk101 is
	port(
		n_reset		: in std_logic;
		clk		: in std_logic;	-- 50MHz
		rxd		: in std_logic;
		txd		: out std_logic;
		--rts		: out std_logic;
		--videoSync	: out std_logic;
		--video		: out std_logic;
		ps2Clk		: in std_logic;
		ps2Data		: in std_logic;

		VGA_R		: out std_logic_vector(3 downto 0);
		VGA_G		: out std_logic_vector(3 downto 0);
		VGA_B		: out std_logic_vector(3 downto 0);
		VGA_HS		: out std_logic;
		VGA_VS		: out std_logic
	);
end uk101;

architecture struct of uk101 is

	signal n_WR		: std_logic;
	signal cpuAddress	: std_logic_vector(15 downto 0);
	signal cpuDataOut	: std_logic_vector(7 downto 0);
	signal cpuDataIn	: std_logic_vector(7 downto 0);

	signal basRomData	: std_logic_vector(7 downto 0);
	signal ramDataOut	: std_logic_vector(7 downto 0);
	signal monitorRomData	: std_logic_vector(7 downto 0);
	signal aciaData		: std_logic_vector(7 downto 0);

	signal n_memWR		: std_logic;
	
	signal n_dispRamCS	: std_logic;
	signal n_ramCS		: std_logic;
	signal n_basRomCS	: std_logic;
	signal n_monitorRomCS	: std_logic;
	signal n_aciaCS		: std_logic;
	signal n_kbCS		: std_logic;
	
	signal dispAddrB 	: std_logic_vector(9 downto 0);
	signal dispRamDataOutA	: std_logic_vector(7 downto 0);
	signal dispRamDataOutB	: std_logic_vector(7 downto 0);
	signal charAddr 	: std_logic_vector(10 downto 0);
	signal charData 	: std_logic_vector(7 downto 0);

	signal serialClkCount	: std_logic_vector(14 downto 0); 
	signal cpuClkCount	: std_logic_vector(5 downto 0); 
	signal cpuClock		: std_logic;
	signal serialClock	: std_logic;

	signal kbReadData 	: std_logic_vector(7 downto 0);
	signal kbRowSel 	: std_logic_vector(7 downto 0);
	
	signal clk25		: std_logic;

	component PLL5_25 is
	port (
		refclk   : in  std_logic := 'X'; -- clk_in
		rst      : in  std_logic := 'X'; -- reset
		outclk_0 : out std_logic         -- clk_out
		);
	end component PLL5_25;

begin

	pll25 : PLL5_25
	port map (
		refclk   => clk,		-- 50MHz
		rst      => not n_reset,
		outclk_0 => clk25		-- 25MHz
		);
	
	n_memWR <= not(cpuClock) nand (not n_WR);

	n_dispRamCS	<= '0' when cpuAddress(15 downto 10) = "110100" else '1';	   -- 1K     $D000-$D3FF  ** expand to 2K **
	n_basRomCS	<= '0' when cpuAddress(15 downto 13) = "101" else '1'; 		   -- 8K     $A000-$BFFF
	n_monitorRomCS	<= '0' when cpuAddress(15 downto 11) = "11111" else '1';	   -- 2K     $F800-$FFFF
	n_ramCS		<= '0' when cpuAddress(15)= '0' else '1';			   -- 32K    $0000-$7FFF		
	n_aciaCS	<= '0' when cpuAddress(15 downto 1) = "111100000000000" else '1';  -- 2BYTES $F000-$F001
	n_kbCS		<= '0' when cpuAddress(15 downto 10) = "110111" else '1';          -- 1K     $DC00-$DFFF  only really need $DC00 itself
 
	cpuDataIn <=
		basRomData	when n_basRomCS = '0' else
		monitorRomData	when n_monitorRomCS = '0' else
		aciaData	when n_aciaCS = '0' else
		ramDataOut	when n_ramCS = '0' else
		dispRamDataOutA when n_dispRamCS = '0' else
		kbReadData	when n_kbCS='0'
		else x"FF";
		
	u1 : entity work.T65
	port map(
		Enable	=> '1',
		Mode	=> "00",
		Res_n	=> n_reset,
		Clk	=> cpuClock,
		Rdy	=> '1',
		Abort_n => '1',
		IRQ_n	=> '1',
		NMI_n	=> '1',
		SO_n	=> '1',
		R_W_n	=> n_WR,
		A(15 downto 0) => cpuAddress,
		DI	=> cpuDataIn,
		DO	=> cpuDataOut);
			

	u2 : entity work.BasicRom -- 8KB
	port map(
		address => cpuAddress(12 downto 0),
		clock => clk,
		q => basRomData
	);

	u3: entity work.ProgRam 
	port map
	(
		address => cpuAddress(14 downto 0),		-- 32Kb
		clock => clk,
		data => cpuDataOut,
		wren => not(n_memWR or n_ramCS),
		q => ramDataOut
	);
	
	u4: entity work.CegmonRom
	port map
	(
		address => cpuAddress(10 downto 0),
		q => monitorRomData
	);

	u5: entity work.bufferedUART
	port map(
		n_wr => n_aciaCS or cpuClock or n_WR,
		n_rd => n_aciaCS or cpuClock or (not n_WR),
		regSel => cpuAddress(0),
		dataIn => cpuDataOut,
		dataOut => aciaData,
		rxClock => serialClock,
		txClock => serialClock,
		rxd => rxd,
		txd => txd,
		n_cts => '0',
		n_dcd => '0',
		n_rts => open
	);

	process (clk)		-- 50MHz , period = 20ns
	begin
		if rising_edge(clk) then
			if cpuClkCount < 49 then
				cpuClkCount <= cpuClkCount + 1;		-- count 0 to 49, -> 0 etc.
			else
				cpuClkCount <= (others=>'0');
			end if;
			-- generate 1MHz CPU clock
			if cpuClkCount < 25 then		
				cpuClock <= '0';			--  0 to 24 = 25 x 20ns == 500ms low
			else
				cpuClock <= '1';			-- 25 to 49 = 25 x 20ns == 500ms high
			end if;	
			
--			if serialClkCount < 10416 then -- 300 baud
			if serialClkCount < 325 then -- 9600 baud
				serialClkCount <= serialClkCount + 1;
			else
				serialClkCount <= (others => '0');
			end if;
--			if serialClkCount < 5208 then -- 300 baud
			if serialClkCount < 162 then -- 9600 baud	-- period = 6480ms
				serialClock <= '0';			--    0 to 161 = 162 x 20ns == 3240ms low
			else
				serialClock <= '1';			--  162 to 325 = 162 x 20ns == 3240ms low
			end if;	
		end if;
	end process;

	u6 : entity work.UK101TextDisplay
	port map (
		charAddr => charAddr,
		charData => charData,
		dispAddr => dispAddrB,
		dispData => dispRamDataOutB,
		clk 	=> clk25,		-- 25.175
		
		red	=> VGA_R,
		green	=> VGA_G,
		blue	=> VGA_B,
		h_sync	=> VGA_HS,
		v_sync	=> VGA_VS
	);

	u7: entity work.CharRom
	port map
	(
		address => charAddr,
		q => charData
	);

	u8: entity work.DisplayRam 
	port map
	(
		address_a => cpuAddress(9 downto 0),
		address_b => dispAddrB,
		clock	=> clk,
		data_a	=> cpuDataOut,
		data_b	=> (others => '0'),
		wren_a	=> not(n_memWR or n_dispRamCS),
		wren_b	=> '0',
		q_a	=> dispRamDataOutA,
		q_b	=> dispRamDataOutB
	);
	
	u9 : entity work.UK101keyboard
	port map(
		CLK	 => clk,
		nRESET	 => n_reset,
		PS2_CLK	 => ps2Clk,
		PS2_DATA => ps2Data,
		A	 => kbRowSel,
		KEYB	 => kbReadData
	);
	
	process (n_kbCS,n_memWR)
	begin
		if	n_kbCS='0' and n_memWR = '0' then
			kbRowSel <= cpuDataOut;
		end if;
	end process;
	
end;
